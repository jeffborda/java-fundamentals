import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {

    /**
     *  Simulates dice rolls beween 1 and 6.  Return n rolls in an array.
     */
    public static int[] roll(int rolls) {

        int[] diceRolls = new int[rolls];
        Random random = new Random();

        for(int i = 0; i < rolls; i++) {
            diceRolls[i] = random.nextInt(6) + 1;
        }
        return diceRolls;
    }

    /**
     *   Method that returns true or false depending on whether the array contains duplicate values.
     */
    public static boolean containsDuplicates(int[] input) {

        for(int i = 0; i < input.length; i++) {
            for(int j = 0; j < input.length; j++){
                if(i != j) {
                    if(input[i] == input[j]){
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * Method that accepts an array of integers and calculates and returns the average of all the values in the array.
     */
    public static int calculateAverage(int[] input) {

        double result = 0;

        for(int i = 0; i < input.length; i++) {
            result += input[i];
        }

        result = result / input.length;


        return (int) Math.round(result);
    }

    /**
     * Given an array of arrays calculate the average value for each array and return the array with the lowest average.
     */
    public static int[] calculateAverageOfArrays(int[][] input) {

        int lowestAverage = calculateAverage(input[0]);
        int indexOfLowestAverage = 0;

        for(int i = 1; i < input.length; i++) {

            int newAverage = calculateAverage(input[i]);

            if(newAverage < lowestAverage) {
                lowestAverage = newAverage;
                indexOfLowestAverage = i;
            }
        }
        return input[indexOfLowestAverage];
    }

    /**
     * Take a 2-D array of temperatures for the month and print the high temp, the low temp,
     * and any temperatures in between that were not recorded in the input array.
     */
    public static void analyzeWeatherData(int[][] weeklyMonthTemperatures) {

        HashSet<Integer> uniqueTemperatures = new HashSet<>();

        for(int i = 0; i < weeklyMonthTemperatures.length; i++) {
            for(int j = 0; j < weeklyMonthTemperatures[i].length; j++) {

                uniqueTemperatures.add(weeklyMonthTemperatures[i][j]);
            }
        }

        int min = (int) Collections.min(uniqueTemperatures);
        int max = (int) Collections.max(uniqueTemperatures);

        System.out.println("High: " + max);
        System.out.println("Low: " + min);

        // could change to min+1, i < max
        for(int i = min; i <= max; i++) {
            if(!uniqueTemperatures.contains(i)){
                System.out.println("Never saw temperature: " + i);
            }
        }
    }

    /**
     * Function accepts a List of Strings representing votes and returns one string to show what got the most votes.
     */
    public static String tally(List<String> votes) {

        HashMap<String, Integer> voteTally = new HashMap<>();
        int maxVotes = 0;
        String winner = "";

        for(String name : votes) {
            voteTally.put(name, 0);
        }

        for(String name : votes ) {
            voteTally.put(name, voteTally.get(name) + 1);
        }

        for (String key: voteTally.keySet()) {

            if(voteTally.get(key) > maxVotes) {
                maxVotes = voteTally.get(key);
                winner = key;
            }
        }
        return winner;
    }



}
